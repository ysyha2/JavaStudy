
* Github 회원가입 해주세요


# Git

  - .git 폴더가 위치한 폴더의 모든 내용을 관리해주는 프로그램
  - .git 폴더가 위치한 폴더를 Repository라고 부른다
  - .git 폴더 내부에는 해당 폴더의 모든 정보가 기록되어 있다 (history)
  - .git 폴더를 이용하여 언제든지 이전 상태로 돌아갈 수 있다 (Windows의 복구 기능과 비슷)
  - Git은 관리하는 폴더 내부의 무언가가 조금만 변해도 모두 알아채고 관리해준다
  - Eclipse에는 Egit이 내장되어있다
 
 # Github
 
   - Repository는 내 컴퓨터에 저장해놓고 사용할 수도 있고 
   	 원격지에 존재하는 컴퓨터에 저장해놓고 필요할때마다 내 컴퓨터로 복사하여 사용할 수도 있다
   - 전자를 로컬(local) 레포지토리라고 하고, 후자를 원격(remote) 레포지토리라고 한다
   - Github는 원격 Repository를 쉽게 생성하고 관리하게 도와주는 웹 사이트다
   
# Github에서 레포지토리 생성 후 작업하는 컴퓨터로 가져오기

  1. Github에서 새로운 Repository 생성해 줄 것 같은 버튼 누르기
  2. 레포지토리 이름 정하기
  3. Readme.md, .gitignore (.gitignore는 사용하는 언어의 템플릿 고르기)
  4. 라이센스 고르기 (내가 만든 코드뭉치를 가져다 사용할 때 돈을 내야하는지 말아야하는지 명시한다)
  5. 생성
  6. Eclipse에서 clone으로 가져오기 (https방식이 쉬움)
  7. 해당 레포지토리에 새 프로젝트 만들기 (.git의 관리를 받는 프로젝트 생성)
  
# .gitignore

  - .gitignore에 작성해둔 패턴과 일치하는 파일들은 Git의 관리 대상에서 제외된다
  - Eclipse IDE를 사용할 때는 Eclipse 관련 설정 파일들을 등록해두는 것이 좋다
  
    .settings/
    *.project
    *.classpath
    
# commit

  - 레포지토리 내부의 변경 사항을 확정짓는 명령어
  - Git은 언제든지 레포지토리 내부의 상황을 commit 했던 시점으로 변경할 수 있다 (과거든 미래든)
  - checkout을 통해 언제든지 원하는 commit으로 HEAD를 옮겨다닐 수 있다
  	(HEAD는 git이 현재 보여주고 있는 상태를 말한다)
  	
  	
# unstaged와 staged의 차이

  - 가장 최신 커밋 이후로 변화가 있었던 파일들은 모두 unstaged 상태가 된다.
  	(이 때 .gitignore에 등록된 파일들은 변경사항이 있어도 unstaged되지 않는다.)
  - unstaged에 있는 변경 사항들 중 이번 커밋에서 확정 짓고 싶은 변경사항 들만
  	staged로 변경 후 커밋을 진행할 수 있다
  - 즉, unstaged에 남아 있는 변경 사항들은 아직 더 만들어야 하는 상태인 코드들이고
  	staged에 포함시킨 변경 사항들은 다 만든 상태인 코드여야 한다.
  	
  	
# branch

  - 하나의 레포지토리를 다양한 형태로 보관하기 위한 기능
  - Git Repositories -> 우클릭 -> Switch To.. -> New Branch
  - 다른 커밋으로 변경하는 것도 checkout이라고 하지만
  	다른 브랜치로 변경하는 것도 checkout이라고 한다.
  - branch를 checkout하면 커밋하지 않은 모든 작업 내용들이 사라지게 된다.	
  	
  	
# merge

  - 한 브랜치의 HEAD(현재 보고 있는 커밋)으로 다른 브랜치의 작업 내용을 합치는 것
  - 합칠 때 같은 부분을 수정한 곳이 있다면 둘 중 하나를 선택하는 심사과정을 거친다 (충돌)
  - Merge 진행 도중 충돌이 발생한 경우, 충돌을 해결하지 않으면 다음 커밋을 진행할 수 없다
  - 충돌이 없는 경우 쉽게 합쳐지기 때문에 남의 파일만 건드리지 않는다면 큰 문제는 발생하지 않는다.
  	
  	
# push

  - 로컬에서 작업한 내용을 원격 레포지토리에 업로하는 것 (밀기)
  
# clone

  - 원격 레포지토리의 내용을 복사해서 그대로 로컬에 가져오는 것 (복사하기)
    	
# pull

  - 로컬 레포지토리의 내용이 원격 레포지토리보다 뒤쳐져 있는 경우 원격에서 가져오는 것 (당기기)  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	